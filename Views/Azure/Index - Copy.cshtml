@model UploadingLagreFiles_JavaScriptFileSplit.Controllers.AzureStorageSASResult
@{
	Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
	<title>Upload</title>
	<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.6.0.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
	<script src="~/lib/azurestoragejs-3.0.100/bundle/azure-storage.blob.js"></script>
	@*<script src="~/lib/azurestoragejs-3.0.100/bundle/azure-storage.blob.min.js"></script>*@
</head>

<body>
	<div class="modal-dialog">
		<div class="modal-content">
			<form asp-controller="Home" asp-action="UploadSmallFile" enctype="multipart/form-data" id="BlobUploadForm"
				  method="post" class="form-label-left" role="form">
				<div class="modal-body">
					<div class="form-group">
						<div class="input-group">
							<label class="input-group-btn">
								<span class="btn btn-primary">
									Browse… <input type="file" style="display: none;" name="file" id="FileInput">
								</span>
							</label>
							<input type="text" class="form-control" readonly="" id="BrowseInput">
						</div>
					</div>
					<div class="form-group">
						<div class="input-group">
							<button type="button" value="Upload to Blob" class="btn btn-success" id="UploadBlob" onclick="uploadBlob()">
								Upload to Blob
							</button>
						</div>
					</div>
					<div class="form-group hidden" id="uploadProgressBarContainer">
						Uploading...
						<div class="progress">
							<div class="progress-bar" role="progressbar" id="uploadProgressBar" aria-valuenow="60"
								 aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
								0%
							</div>
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>

	<script type="text/javascript">
		$(document).on('change', '#FileInput', function () {
			var file = this.files.length > 0 ? this.files[0] : null;
			
			var acceptFileTypes = /(\.|\/)(zip)$/i;
			if (file && !acceptFileTypes.test(file.name)) {
				console.log('Not Allowed type');
				this.value = '';
			}

			var maxSize = 1024 * 1024 * 20;
			if (file && file.size > maxSize) {
				console.log('Not Allowed size');
				this.value = '';
			}

			$('#BrowseInput').val(this.value.replace(/\\/g, '/').replace(/.*\//, ''));
			if (this.value == '') {
				return false;
			}
			else {
				uploadBlob();
				return true;
			}
		});

		function displayProcess(process) {
			document.getElementById("uploadProgressBar").style.width = process + '%';
			document.getElementById("uploadProgressBar").innerHTML = process + '%';
		}

		function uploadBlob() {
			displayProcess(0);
			document.getElementById("uploadProgressBarContainer").classList.remove('hidden');

			// TODO: Call API to get URL, SAS Token, Container name
			var blobUri = '@Html.Raw(Model.AccountUrl)';
			var containerName = '@Html.Raw(Model.ContainerName)';
			var blobName = '@Html.Raw(Model.BlobName)';
			var sasToken = '@Html.Raw(Model.SASToken)';

			// https://vschooldev.blob.core.windows.net/lor/test.zip?sv=2019-10-10&st=2021-08-16T14%3A12%3A58Z&se=2021-08-17T14%3A12%3A58Z&sr=b&sp=racwdx&sig=lhgI4eDXzVL%2BdAb8281%2FbTNCYw0CKJ7VCtFV4VaUW9g%3D
			//var sasToken = 'sv=2019-10-10&st=2021-08-16T14%3A12%3A58Z&se=2021-08-17T14%3A12%3A58Z&sr=b&sp=racwdx&sig=lhgI4eDXzVL%2BdAb8281%2FbTNCYw0CKJ7VCtFV4VaUW9g%3D';

			AzureStorage.Blob.Constants.DEFAULT_PARALLEL_OPERATION_THREAD_COUNT = 1

			var blobService = AzureStorage.Blob.createBlobServiceWithSas(blobUri, sasToken).withFilter(cancelUploadFilter);

			var file = $('#FileInput').get(0).files[0];

			var customBlockSize = 1024 * 100;
			blobService.singleBlobPutThresholdInBytes = customBlockSize;
			blobService.parallelOperationThreadCount = 1;

			var uploadOptions = {
				blockSize: customBlockSize,
				parallelOperationThreadCount: 1,
				metadata: {
					isTemp: true
				}
			};

			cancelUploadFilter.cancel = false;
			cancelUploadFilter.onCancelComplete = function () {
				console.log('Cancelling complete');
			};

			var finishedOrError = false;
			var speedSummary = blobService.createBlockBlobFromBrowserFile(containerName, blobName, file, uploadOptions, function (error, result, response) {
				finishedOrError = true;
				if (error) {
					alert('Error');
				} else {
					displayProcess(100);
				}
			});

			function refreshProgress() {
				setTimeout(function () {
					if (!finishedOrError) {
						var process = speedSummary.getCompletePercent();
						displayProcess(process);
						refreshProgress();
					}
				}, 200);
			}

			refreshProgress();
		}

		// Filter allowing us to cancel an in-progress upload by setting 'cancel' to true.
		// This doesn't cancel file chunks currently being uploaded, so the upload does continue 
		// for a while after this is triggered. If the last chunks have already been sent the 
		// upload might actually complete (??)
		// See http://azure.github.io/azure-storage-node/StorageServiceClient.html#withFilter
		var cancelUploadFilter = {
			cancel: false,              // Set to true to cancel an in-progress upload

			loggingOn: false,            // Set to true to see info on console

			onCancelComplete: null,     // Set to a function you want called when a cancelled request is (probably?) complete, 
			// i.e. when returnCounter==nextCounter. Because when you cancel an upload it can be many 
			// seconds before the in-progress chunks complete. 

			// Internal from here down

			nextCounter: 0,             // Increments each time next() is called. a.k.a. 'SentChunks' ? 
			returnCounter: 0,           // Increments each time next()'s callback function is called. a.k.a. 'ReceivedChunks'?
			handle: function (requestOptions, next) {
				var self = this;
				if (self.cancel) {
					self.log('cancelling before chunk sent');
					return;
				}
				if (next) {
					self.nextCounter++;
					next(requestOptions, function (returnObject, finalCallback, nextPostCallback) {
						self.returnCounter++;
						if (self.cancel) {
							self.log('cancelling after chunk received');
							if (self.nextCounter == self.returnCounter && self.onCancelComplete) {
								self.onCancelComplete();
							}

							// REALLY ??? Is this the right way to stop the upload?
							return;
						}
						if (nextPostCallback) {
							nextPostCallback(returnObject);
						} else if (finalCallback) {
							finalCallback(returnObject);
						}
					});
				}
			},
			log: function (msg) {
				if (this.loggingOn) {
					console.log('cancelUploadFilter: ' + msg + ' nc: ' + this.nextCounter + ', rc: ' + this.returnCounter);
				}
			},
		};
	</script>
</body>
</html>